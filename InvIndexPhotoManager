public class InvIndexPhotoManager {
        BST<LinkedList<Photo>> Inverted_Index;
        
        // Constructor
        public InvIndexPhotoManager()
        {
            Inverted_Index = new BST<LinkedList<Photo>>();
        }
        
        // Add a photo
      public void addPhoto(Photo p) {
	    LinkedList<String> tags = p.getTags();
	    if (tags.empty()) 
	    	return;

	    tags.findfirst();
	    while (true) {
	        String tag = tags.retrieve();
	        
	        if (InvIndex.findkey(tag)) {
	            LinkedList<Photo> photoList = InvIndex.retrieve();
	            photoList.insert(p);
	            InvIndex.update(tag, photoList);
	        } 
	        
	        else {
	            LinkedList<Photo> newList = new LinkedList<>();
	            newList.insert(p);
	            InvIndex.insert(tag, newList);
	        }

	        if (tags.last()) 
	        	break;
	        
	        tags.findnext();
	    }
	}

        // Delete a photo
        public void deletePhoto(String path)
        {
            String AllTags = Inverted_Index.inOrder();
            if (AllTags.length() == 0)
               AllTags += " ";
            else
                AllTags += " AND " + " ";
                
            String[] tags = AllTags.split(" AND ");
            
            for ( int i = 0; i < tags.length ; i++)
            {
                Inverted_Index.findkey(tags[i]);
               LinkedList<Photo> photos_inverted = Inverted_Index.retrieve();
               photos_inverted.findFirst();
               while ( ! photos_inverted.last())
               {
                   if ( photos_inverted.retrieve().getPath().compareToIgnoreCase(path) == 0)
                   {
                       photos_inverted.remove();
                       break;
                   }
                   else
                      photos_inverted.findNext();
                   
               }   
               if (photos_inverted.retrieve().getPath().compareToIgnoreCase(path) == 0)
                    photos_inverted.remove();
               
               if ( photos_inverted.getSize() == 0)
                   Inverted_Index.removeKey(tags[i]);
               else
                   Inverted_Index.update(tags[i], photos_inverted);
            }
        }
        
        // Return the inverted index of all managed photos
        public BST<LinkedList<Photo>> getPhotos()
        {
            return Inverted_Index;
        }
 }
