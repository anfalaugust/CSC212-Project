package DSproject;

public class InvIndexPhotoManager {
BST<LinkedList<Photo>> InvIndex;
        
        // Constructor
public InvIndexPhotoManager()
        {
        	InvIndex = new BST<LinkedList<Photo>>();
        }
        
        // Add a photo
public void addPhoto(Photo p) {
	    LinkedList<String> tags = p.getTags();
	    if (tags.empty()) 
	    	return;

	    tags.findfirst();
	    while (true) {
	        String tag = tags.retrieve();
	        
	        if (InvIndex.findkey(tag)) {
	            LinkedList<Photo> photoList = InvIndex.retrieve();
	            photoList.insert(p);
	            InvIndex.update(tag, photoList);
	        } 
	        
	        else {
	            LinkedList<Photo> newList = new LinkedList<>();
	            newList.insert(p);
	            InvIndex.insert(tag, newList);
	        }

	        if (tags.last()) 
	        	break;
	        
	        tags.findnext();
	    }
	}

        // Delete a photo
public void deletePhoto(String path)
        {
            String tags = InvIndex.inOrder();
            tags += (tags.isEmpty()) ? " " : " AND ";
            String[] tagsArray = tags.split(" AND ");
            
            for ( int i = 0; i < tagsArray.length ; i++)
            {
            	InvIndex.findkey(tagsArray[i]);
               LinkedList<Photo> InvPhotos = InvIndex.retrieve();
               InvPhotos.findfirst();
               while (!InvPhotos.last())
               {
                   if ( InvPhotos.retrieve().getPath().equals(path))
                   {
                	   InvPhotos.remove();
                       return;
                   }
                	   InvPhotos.findnext();
                   
               }   
               if (InvPhotos.retrieve().getPath().equals(path))
            	   InvPhotos.remove();
               
               if ( InvPhotos.getCount() != 0)
            	   InvIndex.update(tagsArray[i], InvPhotos);
               else
            	   InvIndex.removeKey(tagsArray[i]);
            }
        }
        
        // Return the inverted index of all managed photos
 public BST<LinkedList<Photo>> getPhotos()
        {
            return InvIndex;
        }
 }
