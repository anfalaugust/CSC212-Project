package DSproject;

public class InvertedAlbum {
	 private String name;
     private String condition;
     private InvIndexPhotoManager InvertedManager;
     private int NbComps;

     // Constructor
     public InvertedAlbum(String name, String condition, InvIndexPhotoManager manager)
     {
         this.name = name;
         this.condition = condition;
         this.InvertedManager = manager;
         NbComps =0 ;
     }
     
     // Return the name of the album
     public String getName()
     {
         return name;
     }
     
     // Return the condition associated with the album
     public String getCondition()
     {
         return condition;
     }

     // Return the manager
     public InvIndexPhotoManager getManager()
     {
         return InvertedManager;
     }
     
     // Return all photos that satisfy the album condition
public LinkedList<Photo> getPhotos()
     {
         BST<LinkedList<Photo>> photosBST = InvertedManager.getPhotos();
         LinkedList<Photo> resultPhotos = new LinkedList<Photo>();
         NbComps =0 ;
         String [] Tags;
         
         if (this.condition.compareTo("") != 0)
        	 Tags = condition.split(" AND ");
         else
        	 Tags = photosBST.inOrder().split(" AND ");

         for ( int i = 0 ; i < Tags.length ; i++)
         {
             
             if ( photosBST.findkey(Tags[i]) == true)
             {
                 if (i == 0)
                 {
                     LinkedList<Photo > shortTags = photosBST.retrieve();
                     shortTags.findfirst();
                     while ( ! shortTags.last())
                     {
                    	 resultPhotos.insert(shortTags.retrieve());
                    	 shortTags.findnext();
                     }
                     resultPhotos.insert(shortTags.retrieve());
                 }
                 else
                 {
                     if (condition.compareToIgnoreCase("") == 0 )
                    	 resultPhotos  = ListsUnion(resultPhotos , photosBST.retrieve()); 
                     else
                    	 resultPhotos  = ListsIntersection(resultPhotos , photosBST.retrieve()); 
                    	    
                 }
             }
             else
             {
            	 resultPhotos = new LinkedList<Photo>();
                 break;
             }
         }
         return resultPhotos;
     }
    
     public int getNbComps()
     {
         return NbComps;
     }

private LinkedList<Photo> ListsIntersection ( LinkedList<Photo> list1 ,LinkedList<Photo> list2)
     {
    	 LinkedList<Photo> resultList = new LinkedList<Photo>();
         
if (!list2.empty()) {
    list2.findfirst();
      while (!list2.last()) {
    	if (!list1.empty()) {
    	boolean found = false;
    	list1.findfirst();

    	 while (!list1.last() && !found) {
    		 if (list2.retrieve().getPath().equals(list1.retrieve().getPath())) {
    		   NbComps++;  
    		   found = true;
    		 }
    		   list1.findnext();
    		            }

    	if (!found && list2.retrieve().getPath().equals(list1.retrieve().getPath())) {
    	   NbComps++;
    		found = true;
    		            }

    	if (found) {
    		resultList.insert(list2.retrieve());
    		            }
    		        }
    		 list2.findnext();
    		    }

    	 boolean found = false;
          list1.findfirst();
    		while (!list1.last() && !found) {
    		   if (list2.retrieve().getPath().equals(list1.retrieve().getPath())) {
    		      NbComps++;
    		      found = true;
    		        }
    		      list1.findnext();
    		    }

    		    if (!found && list2.retrieve().getPath().equals(list1.retrieve().getPath())) {
    		        NbComps++;
    		        found = true;
    		    }

    		    if (found) {
    		        resultList.insert(list2.retrieve());
    		    }
    		}

    		return resultList;
     }
private LinkedList<Photo> ListsUnion ( LinkedList<Photo> list1 ,LinkedList<Photo> list2)
     {
    if (! list2.empty())
         {
      list2.findfirst();
       while (! list2.last())
             {
        if (! list1.empty())
                 {
           boolean found = false;
           list1.findfirst();
             while (! list1.last() && ! found)
                     {
         if (list2.retrieve().getPath().equals(list1.retrieve().getPath()))
                         {
             NbComps++;
             found = true;
                         }
             list1.findnext();
                     }
         if (! found && list2.retrieve().getPath().equals(list1.retrieve().getPath()))
                     {
           NbComps++;
            found = true;
                     }
          if (!found )
          list1.insert(list2.retrieve());
                         
                 }
          list2.findnext();
             }
             
   boolean found = false;
   list1.findfirst();
      while (! list1.last() && ! found)
             {
          if (list2.retrieve().getPath().equals(list1.retrieve().getPath()))
                 {
            NbComps++;
            found = true;
                 }
            list1.findnext();
             }
           if (! found && list2.retrieve().getPath().equals(list1.retrieve().getPath()))
             {
                 NbComps++;
                 found = true;
             }
             if (!found )
                 list1.insert(list2.retrieve());
                               
         }
         return list1;
     }
}
