package DSproject;

public class BST <T> {
BSTNode<T> root, current;
/** Creates a new instance of BST */
public BST() {
root = current = null;
}
public boolean empty() {
return root == null;
}
public boolean full() {
return false;
}
public T retrieve () {
return current.data;
}

public boolean findkey(String tkey) {
BSTNode<T> p = root, q = root;
if(empty())
return false;
while(p != null) {
q = p;
if(p.key == tkey) {
current = p;
return true;
}
else if(tkey < p.key)
p = p.left;
else
p = p.right;
}
current = q;
return false;
}

public boolean insert(String k, T val) {
BSTNode<T> p, q = current;
if(findkey(k)) {
current = q; 
return false; 
}
p = new BSTNode<T>(k, val);
if (empty()) {
root = current = p;
return true;
}
else {
if (k < current.key)
current.left = p;
else
current.right = p;
current = p;
return true;
}
}

public boolean removeKey(String k) {
BSTNode<T> p = root;
BSTNode<T> q = null; // Parent of p
boolean found=false;
String Key = k;
// Search for k
while ((p != null)&&(!found)) {
if (Key.compareToIgnoreCase(p.key) < 0) {
q = p;
p = p.left;
} else if (Key.compareToIgnoreCase(p.key) > 0) {
q = p;
p = p.right;
} else // Found the key
found=true;
}
if(found){
	// Check the three cases
	if ((p.left != null) && (p.right != null)) { // Case 3: two
	// children
	// Search for the min in the right subtree
	BSTNode<T> min = p.right;
	q = p;
	while (min.left != null) {
	q = min;
	min = min.left;
	}
	p.key = min.key;
	p.data = min.data;
	deleteNode(min,q);
	}
	else //case 1 and 2
	deleteNode(p,q);
	current = root;
	return true;
	}
	return false; // Not found
	}



private void deleteNode(BSTNode<T> n,BSTNode<T> parent) {
	BSTNode<T> child;
	if(n.left!=null)
	child=n.left;
	else
	child=n.right;
	if (parent == null) {
	root = child;
	} else {
	if (n.key - parent.key < 0) {
	parent.left = child;
	} else {
	parent.right = child;
	}
	}
}
private boolean update(String key, T data) {
	remove_key(current.key);
	return insert(key, data);
}
}
